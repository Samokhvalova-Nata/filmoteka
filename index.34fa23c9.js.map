{"mappings":"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","sources":["src/js/API.js","node_modules/@swc/helpers/lib/_define_property.js","src/js/pop-films-loading.js"],"sourcesContent":["import axios from 'axios';\n\nclass FetchTheMovieDbAPI {\n  //the properties below shall not be available outside to prevent accidential change\n    #period = 'week'; //'week' or 'day' //TODO: check\n    #searchQuery = 'Avatar'; //some default value\n\n    #BASE_URL = 'https://api.themoviedb.org/3/';\n    #API_KEY = '169863a84bc27c731fc45c45dd4a4a7e';\n    backEndConfig = { test: 0 };\n    poster_sizes = [\n        'w92',\n        'w154',\n        'w185',\n        'w342',\n        'w500',\n        'w780',\n        'original',\n    ];\n\n    constructor() {\n        this.fetchConf(); //TODO: can be commented (then backEndConfig will be not valid)\n    }\n\n    async fetchMovie(page, searchQuery) {\n    //update property value if parameter supplied\n        if (searchQuery) {\n        this.#searchQuery = searchQuery;\n    }\n\n    try {\n        const url = `${this.#BASE_URL}/search/movie?api_key=${this.#API_KEY}&language=en-US&page=${page}&query=${this.#searchQuery}`;\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.message);\n    }\n}\n\n    async fetchPopMovies(page) {\n        try {\n            const url = `${this.#BASE_URL}trending/movie/${this.#period}?api_key=${this.#API_KEY}&page=${page}`;\n            const response = await axios.get(url);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.message);\n        }\n    }\n\n    async fetchMovieInfo(id) {\n        try {\n            const url = `${this.#BASE_URL}movie/${id}?api_key=${this.#API_KEY}&language=en-US`;\n            const response = await axios.get(url);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.message);\n    }\n    }\n\n    async fetchGenres() {\n        const url = `${this.#BASE_URL}genre/movie/list?api_key=${this.#API_KEY}&language=en-US`;\n        try {\n            const {data} = await axios.get(url);\n            return data;\n        } catch (error) {\n            throw new Error(error.message);\n        }\n    }\n\n    async fetchConf() {\n        const url = `${this.#BASE_URL}configuration?api_key=${this.#API_KEY}`;\n        try {\n            const r = await axios.get(url);\n            this.backEndConfig = r.data; //TODO: update property poster_sizes @fetchConf\n            return r.data;\n        } catch (error) {\n            throw new Error(error.message);\n        }\n    }\n\n  //***\n  //  returns first size which is equal or larger then widthMin\n    getPosterSize(widthMin) {\n        for (let i = 0; i < this.poster_sizes.length; i += 1) {\n            if (widthMin <= Number(this.poster_sizes[i].slice(1))) {\n            return this.poster_sizes[i];\n        }\n    }\n    return this.poster_sizes[this.poster_sizes.length-1];\n    }\n\n    togglePeriod() {\n        this.#period = this.#period === 'week' ? 'day' : 'week';\n        return this.#period;\n    }\n}\n\nexport const api = new FetchTheMovieDbAPI();\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","// FT-07 Реалізувати підвантаження популярних фільмів на головну (першу) сторінку\nimport { pagination } from './pagination.js';\nimport { genres } from './genres';\nimport { heightMax } from './withScroll';\nimport { api } from './API.js'\nimport { getTemplateCard } from './template-card.js';\n\nconst galleryListEl = document.querySelector('.film__gallery');\nconst POSTER_SIZE = api.getPosterSize(342);\n\nheightMax();\nhandlePageBtnClick(1);\n\npagination.on('afterMove', () => handlePageBtnClick(pagination._currentPage));\n\nasync function handlePageBtnClick(page) {\n  try {\n    const data = await api.fetchPopMovies(page);\n    galleryListEl.innerHTML = createGalleryCards(data.results, POSTER_SIZE);\n    pagination.setTotalItems(data.total_results);\n  } catch (error) {\n    console.log('ERROR! ', error);\n  }\n}\n\nfunction createGalleryCards(results, poster_size) {\n  return results\n    .map(({ poster_path, title, genre_ids, release_date, id }) => {\n      return getTemplateCard({\n        title,                   \n        genresStr: genres.getSome(genre_ids), \n        release_year: release_date.slice(0, 4),      \n        poster_path,              \n        poster_size,\n        id\n      })\n    })\n    .join('');\n}"],"names":["$bpxeT","parcelRequire","$a0cf0ea23f45c8c0$var$_period","WeakMap","$a0cf0ea23f45c8c0$var$_searchQuery","$a0cf0ea23f45c8c0$var$_BASE_URL","$a0cf0ea23f45c8c0$var$_API_KEY","$a0cf0ea23f45c8c0$export$644d8ea042df96a6","FetchTheMovieDbAPI","$parcel$interopDefault","$8MQK7","this","$hKHmD","test","fetchConf","key","page","searchQuery","$2TvXO","mark","_callee","url","response","$dPxxm","_this","concat","$4KMWL","$dIxxU","default","get","_ctx","sent","data","Error","t0","message","id","r","backEndConfig","widthMin","i","poster_sizes","length","Number","slice","Object","defineProperty","module","exports","value","obj","enumerable","configurable","writable","$2f61e221470a2e76$var$galleryListEl","document","querySelector","$2f61e221470a2e76$var$POSTER_SIZE","$dNYR7","api","getPosterSize","$2f61e221470a2e76$var$handlePageBtnClick","$2f61e221470a2e76$var$_handlePageBtnClick","apply","arguments","fetchPopMovies","innerHTML","$2f61e221470a2e76$var$createGalleryCards","results","$jcFG7","pagination","setTotalItems","total_results","console","log","poster_size","map","param","poster_path","title","genre_ids","release_date","$lEY6y","getTemplateCard","genresStr","$twtVq","genres","getSome","release_year","join","$lOe7j","heightMax","on","_currentPage"],"version":3,"file":"index.34fa23c9.js.map"}