{"mappings":"ooBAAA,IAAAA,EAAAC,EAAA,SAiGO,MAAMC,EAAM,IA/FnB,MAEIC,GAAU,OACVC,GAAe,SAEfC,GAAY,gCACZC,GAAW,mCACXC,cAAgB,CAAEC,KAAM,GACxBC,aAAe,CACX,MACA,OACA,OACA,OACA,OACA,OACA,YAGJC,cACIC,KAAKC,W,CAGTC,iBAAiBC,EAAMV,GAEfA,IACJO,MAAKP,EAAeA,GAGxB,IACI,MAAMW,EAAM,GAAGJ,MAAKN,0BAAkCM,MAAKL,yBAAgCQ,WAAcH,MAAKP,IAE9G,aADuBJ,EAAAgB,QAAMC,IAAIF,IACjBG,I,CAClB,MAAOC,GACL,MAAM,IAAIC,MAAMD,EAAME,Q,EAI1BR,qBAAqBC,GACjB,IACI,MAAMC,EAAM,GAAGJ,MAAKN,mBAA2BM,MAAKR,aAAmBQ,MAAKL,UAAiBQ,IAE7F,aADuBd,EAAAgB,QAAMC,IAAIF,IACjBG,I,CAClB,MAAOC,GACL,MAAM,IAAIC,MAAMD,EAAME,Q,EAI9BR,qBAAqBS,GACjB,IACI,MAAMP,EAAM,GAAGJ,MAAKN,UAAkBiB,aAAcX,MAAKL,mBAEzD,aADuBN,EAAAgB,QAAMC,IAAIF,IACjBG,I,CAClB,MAAOC,GACL,MAAM,IAAIC,MAAMD,EAAME,Q,EAI9BR,oBACI,MAAME,EAAM,GAAGJ,MAAKN,6BAAqCM,MAAKL,mBAC9D,IACI,MAAMY,KAACA,SAAclB,EAAAgB,QAAMC,IAAIF,GAC/B,OAAOG,C,CACT,MAAOC,GACL,MAAM,IAAIC,MAAMD,EAAME,Q,EAI9BR,kBACI,MAAME,EAAM,GAAGJ,MAAKN,0BAAkCM,MAAKL,IAC3D,IACI,MAAMiB,QAAUvB,EAAAgB,QAAMC,IAAIF,GAE1B,OADAJ,KAAKJ,cAAgBgB,EAAEL,KAChBK,EAAEL,I,CACX,MAAOC,GACL,MAAM,IAAIC,MAAMD,EAAME,Q,EAM9BG,cAAcC,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIf,KAAKF,aAAakB,OAAQD,GAAK,EAC/C,GAAID,GAAYG,OAAOjB,KAAKF,aAAaiB,GAAGG,MAAM,IAClD,OAAOlB,KAAKF,aAAaiB,GAGjC,OAAOf,KAAKF,aAAaE,KAAKF,aAAakB,OAAO,E,CAGlDG,eAEI,OADAnB,MAAKR,EAA2B,SAAjBQ,MAAKR,EAAqB,MAAQ,OAC1CQ,MAAKR,C,MC5FpB,IAAA4B,EAAA9B,EAAA,S,oDAMA,MAAM+B,EAAgBC,SAASC,cAAc,kBACvCC,EAAcC,EAAAC,IAAIb,cAAc,KAOtCX,eAAeyB,EAAmBxB,GAChC,IACE,MAAMI,QAAakB,EAAAC,IAAIE,eAAezB,GACtCkB,EAAcQ,WAOUC,EAPqBvB,EAAKuB,QAOjBC,EAP0BP,EAQtDM,EACJE,KAAI,EAACC,YAAEA,EAAWC,MAAEA,EAAKC,UAAEA,EAASC,aAAEA,EAAYzB,GAAEA,MAC5C,EAAA0B,EAAAC,iBAAgB,C,MACrBJ,EACAK,UAAWC,EAAAC,OAAOC,QAAQP,GAC1BQ,aAAcP,EAAalB,MAAM,EAAG,G,YACpCe,E,YACAF,E,GACApB,MAGHiC,KAAK,KAlBNxB,EAAAyB,WAAWC,cAAcvC,EAAKwC,c,CAC9B,MAAOvC,GACPwC,QAAQC,IAAI,UAAWzC,E,CAI3B,IAA4BsB,EAASC,C,EAfrC,EAAAmB,EAAAC,aACAxB,EAAmB,GAEnBP,EAAAyB,WAAWO,GAAG,aAAa,IAAMzB,EAAmBP,EAAAyB,WAAWQ","sources":["src/js/API.js","src/js/pop-films-loading.js"],"sourcesContent":["import axios from 'axios';\n\nclass FetchTheMovieDbAPI {\n  //the properties below shall not be available outside to prevent accidential change\n    #period = 'week'; //'week' or 'day' //TODO: check\n    #searchQuery = 'Avatar'; //some default value\n\n    #BASE_URL = 'https://api.themoviedb.org/3/';\n    #API_KEY = '169863a84bc27c731fc45c45dd4a4a7e';\n    backEndConfig = { test: 0 };\n    poster_sizes = [\n        'w92',\n        'w154',\n        'w185',\n        'w342',\n        'w500',\n        'w780',\n        'original',\n    ];\n\n    constructor() {\n        this.fetchConf(); //TODO: can be commented (then backEndConfig will be not valid)\n    }\n\n    async fetchMovie(page, searchQuery) {\n    //update property value if parameter supplied\n        if (searchQuery) {\n        this.#searchQuery = searchQuery;\n    }\n\n    try {\n        const url = `${this.#BASE_URL}/search/movie?api_key=${this.#API_KEY}&language=en-US&page=${page}&query=${this.#searchQuery}`;\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.message);\n    }\n}\n\n    async fetchPopMovies(page) {\n        try {\n            const url = `${this.#BASE_URL}trending/movie/${this.#period}?api_key=${this.#API_KEY}&page=${page}`;\n            const response = await axios.get(url);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.message);\n        }\n    }\n\n    async fetchMovieInfo(id) {\n        try {\n            const url = `${this.#BASE_URL}movie/${id}?api_key=${this.#API_KEY}&language=en-US`;\n            const response = await axios.get(url);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.message);\n    }\n    }\n\n    async fetchGenres() {\n        const url = `${this.#BASE_URL}genre/movie/list?api_key=${this.#API_KEY}&language=en-US`;\n        try {\n            const {data} = await axios.get(url);\n            return data;\n        } catch (error) {\n            throw new Error(error.message);\n        }\n    }\n\n    async fetchConf() {\n        const url = `${this.#BASE_URL}configuration?api_key=${this.#API_KEY}`;\n        try {\n            const r = await axios.get(url);\n            this.backEndConfig = r.data; //TODO: update property poster_sizes @fetchConf\n            return r.data;\n        } catch (error) {\n            throw new Error(error.message);\n        }\n    }\n\n  //***\n  //  returns first size which is equal or larger then widthMin\n    getPosterSize(widthMin) {\n        for (let i = 0; i < this.poster_sizes.length; i += 1) {\n            if (widthMin <= Number(this.poster_sizes[i].slice(1))) {\n            return this.poster_sizes[i];\n        }\n    }\n    return this.poster_sizes[this.poster_sizes.length-1];\n    }\n\n    togglePeriod() {\n        this.#period = this.#period === 'week' ? 'day' : 'week';\n        return this.#period;\n    }\n}\n\nexport const api = new FetchTheMovieDbAPI();\n\n","// FT-07 Реалізувати підвантаження популярних фільмів на головну (першу) сторінку\nimport { pagination } from './pagination.js';\nimport { genres } from './genres';\nimport { heightMax } from './withScroll';\nimport { api } from './API.js'\nimport { getTemplateCard } from './template-card.js';\n\nconst galleryListEl = document.querySelector('.film__gallery');\nconst POSTER_SIZE = api.getPosterSize(342);\n\nheightMax();\nhandlePageBtnClick(1);\n\npagination.on('afterMove', () => handlePageBtnClick(pagination._currentPage));\n\nasync function handlePageBtnClick(page) {\n  try {\n    const data = await api.fetchPopMovies(page);\n    galleryListEl.innerHTML = createGalleryCards(data.results, POSTER_SIZE);\n    pagination.setTotalItems(data.total_results);\n  } catch (error) {\n    console.log('ERROR! ', error);\n  }\n}\n\nfunction createGalleryCards(results, poster_size) {\n  return results\n    .map(({ poster_path, title, genre_ids, release_date, id }) => {\n      return getTemplateCard({\n        title,                   \n        genresStr: genres.getSome(genre_ids), \n        release_year: release_date.slice(0, 4),      \n        poster_path,              \n        poster_size,\n        id\n      })\n    })\n    .join('');\n}"],"names":["$2shzp","parcelRequire","$9641fdd394b90517$export$644d8ea042df96a6","period","searchQuery","BASE_URL","API_KEY","backEndConfig","test","poster_sizes","constructor","this","fetchConf","async","page","url","default","get","data","error","Error","message","id","r","getPosterSize","widthMin","i","length","Number","slice","togglePeriod","$2nhTy","$7c5e04dde74f2dd2$var$galleryListEl","document","querySelector","$7c5e04dde74f2dd2$var$POSTER_SIZE","$cTOKP","api","$7c5e04dde74f2dd2$var$handlePageBtnClick","fetchPopMovies","innerHTML","results","poster_size","map","poster_path","title","genre_ids","release_date","$lIZrp","getTemplateCard","genresStr","$ezyJp","genres","getSome","release_year","join","pagination","setTotalItems","total_results","console","log","$5RyOa","heightMax","on","_currentPage"],"version":3,"file":"index.c8bf1785.js.map"}